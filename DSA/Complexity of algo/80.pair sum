public class Solution {	

	public static int pairSum(int[] arr, int num) {
		//Your code goes here
        int pair = 0;
        for(int i=0; i<arr.length;i++){
            int ele = arr[i];
            for(int j=i+1; j<arr.length;j++){
                if(ele + arr[j] == num){
                    pair++;
					// System.out.println(i + " " + "," + j);
                }
            }
        }
        return pair;
	}
}
//tc: O(n^2)


import java.util.*;
public class Solution {	
	public static int pairSum(int[] arr, int num) {
		//Your code goes here
        Arrays.sort(arr);
        int pair=0, left = 0, right = arr.length-1;
        while(left < right){
            int sum = arr[left] + arr[right];
            if(sum < num){
                left++;

            }else if(sum > num){
                right--;
                
            }else if(sum == num){
                 int duplicateCount = 0;
                if(arr[left] != arr[right]){
                    int leftCount = 1, rightCount = 1;
                    int leftValue = arr[left], rightValue = arr[right];
                    for(int i=left+1; i<right; i++){
                        if(arr[i] == leftValue){
                            leftCount++;
                            left++;
                        }
                    }
                    for(int j=right-1; j>left; j--){
                        if(arr[j] == rightValue){
                            rightCount++;
                            right--;
                        }
                    }
                    duplicateCount = leftCount*rightCount;

                }else if(arr[left] == arr[right]){
                    // int n =0;
                    // for(int i=0; i<arr.length; i++){
                    //     if(arr[i] == arr[left]){
                    //         n++;
                    //     }
                    // }
                    int n = right - left + 1;
                    duplicateCount = n*(n-1) / 2;
                    left += duplicateCount;
                }
                pair = pair + duplicateCount;
                left++;
            }
        }
        return pair;
	}
}
//tc: O(nlogn)