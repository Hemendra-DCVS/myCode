//03/06/2023//
public class Solution {

    public static boolean ratInAMaze(int maze[][]) {
        int n = maze.length;
        int path[][] = new int[n][n];
        return solveMazeH(maze, 0, 0, path, n);
    }

    public static boolean solveMazeH(int maze[][], int i, int j, int path[][], int n) {
        // CONDITIONS
        if (i < 0 || i >= n || j < 0 || j >= n || maze[i][j] == 0 || path[i][j] == 1) {
            return false;
        }

        // DESTINATION
        if (i == n - 1 && j == n - 1) {
            path[i][j] = 1;
            return true;
        }

        path[i][j] = 1; // Mark the current cell as part of the path

        // Move right
        if (solveMazeH(maze, i, j + 1, path, n)) {
            return true;
        }
        // Move down
        if (solveMazeH(maze, i + 1, j, path, n)) {
            return true;
        }
        // Move up
        if (solveMazeH(maze, i - 1, j, path, n)) {
            return true;
        }
        // Move left
        if (solveMazeH(maze, i, j - 1, path, n)) {
            return true;
        }

        path[i][j] = 0; // Unmark the current cell as part of the path
        return false;
    }
}
